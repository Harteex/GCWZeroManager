
*** MAIN WINDOW / GENERAL ***
* Krashar om man försöker överföra filer som flyttats / tagits bort
* Move all (most?) connection usage to its own thread, with a queue. If not all, make sure to guard with locks... then handle things asynchronously in the GUI.
* Automatically load some data for example initial directory in Files if connected?
* Get rid of bool return statuses, use more exceptions. Create or find exception for not connected.
* Instructions on the add connection wizard should say it's safe to turn off password login in the network app
* New icon, this one kinda sucks
* Some notice about known bugs????


*** INSTALL SOFTWARE ***
* Display title correctly (port libopk? https://github.com/gcwnow/libopk)


*** MANAGE SOFTWARE ***
* Display title correctly (also, icon?)


*** FILES ***
* Sortera alltid mapparna längst upp på name...
* Gör det möjligt att skriva in path själv
* Stödj path utan avslutande /
* Allow delete with delete key


*** NEW FEATURES ***

* Set file permissions?

* Translations?

* SSDP
Find GCW Zero automatically, instead of having to enter an IP / Host
http://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol
https://github.com/tomwaters/SSDP-Tester
https://gist.github.com/provegard/1435555
https://github.com/gavdraper/SSDPSonos/blob/master/SSDPSharp/SsdpLocator.cs
Use windows implementation: http://managedupnp.codeplex.com/

* Backup
"another useful option would be a backup feature that would rsync all the dot-directories under $HOME"

* Background image in datagrid which says dragndrop here or something, should only show up when empty... also centered, not repeated.
http://stackoverflow.com/questions/13509902/turning-a-wpf-datagrid-background-image-on-and-off
http://stackoverflow.com/questions/3100837/how-to-set-background-image-on-grid-in-wpf-using-c-sharp





















SSDP:
public async static Task<IEnumerable<HueBridge>> DiscoverAsync(TimeSpan timeout)
{
  if (timeout <= TimeSpan.Zero)
    throw new ArgumentException("Timeout value must be greater than zero.", "timeout");

  var discoveredBridges = new List<HueBridge>();
  var multicastIP = new HostName("239.255.255.250");
  var bridgeWasFound = false;

  using (var socket = new DatagramSocket())
  {
    socket.MessageReceived += (sender, e) =>
    {
      var reader = e.GetDataReader();
      var bytesRemaining = reader.UnconsumedBufferLength;
      var receivedString = reader.ReadString(bytesRemaining);

      // TODO: Check for existing bridges, only add new ones to prevent infinite loop.
      // TODO: Create new bridge and add to the list. 

      bridgeWasFound = true;
    };

    await socket.BindEndpointAsync(null, string.Empty);
    socket.JoinMulticastGroup(multicastIP);

    while (true)
    {
      bridgeWasFound = false;

      using (var stream = await socket.GetOutputStreamAsync(multicastIP, "1900"))
      using (var writer = new DataWriter(stream))
      {
        var request = new StringBuilder();
        request.AppendLine("M-SEARCH * HTTP/1.1");
        request.AppendLine("HOST: 239.255.255.250:1900");
        request.AppendLine("MAN: ssdp:discover");
        request.AppendLine("MX: 3");
        request.AppendLine("ST: ssdp:all");

        writer.WriteString(request.ToString());
        await writer.StoreAsync();

        if (timeout > TimeSpan.Zero)
          await Task.Delay(timeout);

        if (!bridgeWasFound)
          break;
      }
    }
  }

  return discoveredBridges;
}



ÄVEN:
https://github.com/gavdraper/SSDPSonos
